#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

Adafruit_BNO055 bno = Adafruit_BNO055(55);

// BLE UUIDs for service and characteristic
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

BLECharacteristic *pCharacteristic;

#define OPERATION_MODE_NDOF 0x0C

void setup() {
  Serial.begin(115200);

  // Initialize BNO055
  while (!bno.begin()) {
    Serial.println("BNO055 not detected");
    delay(1000);
  }
  Serial.println("BNO055 now detected");

  bno.setMode((adafruit_bno055_opmode_t)OPERATION_MODE_NDOF);
  bno.setExtCrystalUse(true); // Use external crystal for better accuracy

  Serial.println("BNO055 Initialized in NDOF mode");

  // Initialize BLE
  BLEDevice::init("JAMSHED_P"); // BLE device name
  BLEServer *pServer = BLEDevice::createServer();
  BLEService *pService = pServer->createService(SERVICE_UUID);

  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_NOTIFY
                    );

  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();

  // Start advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);  // Ensure it appears in scans
  pAdvertising->setMinPreferred(0x06);  // Set BLE connection parameters
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();

  Serial.println("BLE IMU started. Connect using LightBlue app.");
}

void loop() {
  // Get Linear Acceleration
  imu::Vector<3> lin_accel = bno.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);

//   // Get Gyroscope Data
  imu::Vector<3> gyro = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);

//   // Get Euler Angles
  imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);

  // Format data as a string
  String accel_data = "LinAcc X:" + String(lin_accel.x()) +
                "LinAcc Y:" + String(lin_accel.y()) +
                "LinAcc Z:" + String(lin_accel.z());

  // Format data as a string
  String gyro_data = "Gyro X:" + String(gyro.x()) +
                "Gyro Y:" + String(gyro.y()) +
                "Gyro Z:" + String(gyro.z());

  // Format data as a string
  String euler_data = "Roll (Euler X):" + String(euler.x()) +
                "Pitch (Euler Y):" + String(euler.y()) +
                "Yaw (Euler Z):" + String(euler.z());
  

  // Send data over BLE
  pCharacteristic->setValue(accel_data.c_str());
  pCharacteristic->notify();
  pCharacteristic->setValue(gyro_data.c_str());
  pCharacteristic->notify();
  pCharacteristic->setValue(euler_data.c_str());
  pCharacteristic->notify();

  Serial.println(accel_data);
  Serial.println(gyro_data);
  Serial.println(euler_data);
  delay(200); // Adjust streaming rate
}
