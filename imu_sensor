#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

Adafruit_BNO055 bno = Adafruit_BNO055(55);

// BLE UUIDs
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

BLECharacteristic *pCharacteristic;
BLEAdvertising *pAdvertising;

#define OPERATION_MODE_NDOF 0x0C

float thetaM;
float phiM;
float thetaFold = 0;
float thetaFnew;
float phiFold = 0;
float phiFnew;

float thetaG = 0;
float phiG = 0;

float theta;
float phi;

unsigned long millisOld;
unsigned long time1;
float dt;

float Vx, Vy, Vz;
float initVx, initVy, initVz = 0;

bool isAdvertising = false;

// ✅ Add BLE Disconnect Handler
class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    Serial.println("✅ BLE client connected.");
    isAdvertising = false;
  }

  void onDisconnect(BLEServer* pServer) {
    Serial.println("❌ BLE client disconnected. Restarting advertising...");
    delay(500); // Short delay before restarting
    BLEDevice::startAdvertising();
    isAdvertising = true;
  }
};

void setup() {
  Serial.begin(115200);
  BLEDevice::deinit(true);  // Reset BLE
  delay(1000);
  BLEDevice::init("JAMSHED_P");

  // Init IMU
  while (!bno.begin()) {
    Serial.println("BNO055 not detected");
    delay(1000);
  }
  bno.setMode((adafruit_bno055_opmode_t)OPERATION_MODE_NDOF);
  bno.setExtCrystalUse(true);
  Serial.println("BNO055 Initialized in NDOF mode");

  // BLE Server
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks()); // 👈 Set disconnect handler
  BLEService *pService = pServer->createService(SERVICE_UUID);

  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_NOTIFY
  );
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();

  // Start advertising
  pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();
  isAdvertising = true;

  Serial.println("BLE IMU started. Connect using LightBlue app.");
}

void loop() {
  // Read IMU data
  imu::Vector<3> lin_accel = bno.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
  imu::Vector<3> gyro = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
  imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);

  dt = (millis() - millisOld) / 1000.; 
  millisOld = millis();
  theta = (theta + gyro.y() * dt) * 0.95 + thetaM * 0.05;
  phi = (phi - gyro.x() * dt) * 0.95 + phiM * 0.05;
  thetaG = thetaG + gyro.y() * dt;
  phiG = phiG - gyro.x() * dt;

  time1 = millisOld / 1000;

  Vx = initVx + lin_accel.x() * dt;
  Vy = initVy + lin_accel.y() * dt;
  Vz = (initVz + lin_accel.z() * dt) - 1;



  // Read calibration status
  uint8_t sys, gyroCalib, accelCalib, magCalib;
  bno.getCalibration(&sys, &gyroCalib, &accelCalib, &magCalib);

  // Format full data string
  String combined = 
    "LinAcc X:" + String(lin_accel.x()) + "LinAcc Y:" + String(lin_accel.y()) + "LinAcc Z:" + String(lin_accel.z()) + ";" +
    "Gyro X:" + String(gyro.x()) + "Gyro Y:" + String(gyro.y()) + "Gyro Z:" + String(gyro.z()) + ";" +
    "Roll (Euler X):" + String(euler.x()) +
    "Pitch (Euler Y):" + String(euler.y()) +
    "Yaw (Euler Z):" + String(euler.z()) + ";" +
    "Calib Sys:" + String(sys) + " Gyro:" + String(gyroCalib) + " Accel:" + String(accelCalib) + " Mag:" + String(magCalib) + ";" + 
    "Vx:" + String(Vx) + "Vy:" + String(Vy) + "Vz:" + String(Vz);

  // Send over BLE
  pCharacteristic->setValue(combined.c_str());
  pCharacteristic->notify();

  // Debug to serial
  Serial.println(combined);
  delay(500);
}
